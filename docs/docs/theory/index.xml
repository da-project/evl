<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theory on EVL</title>
    <link>/docs/theory.html</link>
    <description>Recent content in Theory on EVL</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="/docs/theory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tuple of types distance</title>
      <link>/docs/theory/tuple-distance.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/tuple-distance.html</guid>
      <description>&lt;p&gt;The first prerequisite to understand how multimethods work is to know what is the tuple of types distance.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Simple hierarchy&#34; src=&#34;../../images/hierarchy.png#center&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Here is a simple hierarchy, the one that we used in the examples of &lt;a href=&#34;../../docs/the-multimethods.html&#34;&gt;the multimethods&lt;/a&gt; section.&lt;/p&gt;&#xA;&lt;h3 id=&#34;type-distance&#34;&gt;Type distance&lt;/h3&gt;&#xA;&lt;p&gt;Suppose that the type &lt;em&gt;X&lt;/em&gt; is a super class (including interface) of &lt;em&gt;Y&lt;/em&gt;.&#xA;The distance between &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; is defined as the &lt;strong&gt;minimum number of edges&lt;/strong&gt; between them in the type graph.&#xA;The distance is not defined for types that do not have an inheritance relation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Distance comparators</title>
      <link>/docs/theory/distance-comparators.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/distance-comparators.html</guid>
      <description>&lt;p&gt;The second prerequisite to understand how multimethods work is to know what are the comparators for the tuple of types distance.&lt;/p&gt;&#xA;&lt;p&gt;There are many possible ways to define comparators on tuple of integers. We follow the Java convention on return values of compare methods so that for &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; tuple of integers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If &lt;em&gt;x&lt;/em&gt; &amp;lt; &lt;em&gt;y&lt;/em&gt;, return -1&lt;/li&gt;&#xA;&lt;li&gt;If &lt;em&gt;x&lt;/em&gt; &amp;gt; &lt;em&gt;y&lt;/em&gt;, return 1&lt;/li&gt;&#xA;&lt;li&gt;If &lt;em&gt;x&lt;/em&gt; == &lt;em&gt;y&lt;/em&gt;, return 0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In the EVL library, we provide two useful comparators on integer tuples.&#xA;The tuples have size &lt;em&gt;D&lt;/em&gt; and value at dimension &lt;em&gt;i&lt;/em&gt; is accessed by &lt;em&gt;x&lt;/em&gt;[&lt;em&gt;i&lt;/em&gt;] and &lt;em&gt;y&lt;/em&gt;[&lt;em&gt;i&lt;/em&gt;].&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multimethod definition</title>
      <link>/docs/theory/multimethod-definition.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/multimethod-definition.html</guid>
      <description>&lt;h3 id=&#34;definition&#34;&gt;Definition&lt;/h3&gt;&#xA;&lt;p&gt;An EVL multimethod is defined as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A multimethod of &lt;strong&gt;dimension&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/em&gt; has a set &lt;em&gt;M&lt;/em&gt; of &lt;em&gt;N&lt;/em&gt; match methods &lt;em&gt;m&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;&lt;em&gt;j&lt;/em&gt;&lt;!-- raw HTML omitted --&gt; with 0 &amp;lt;= &lt;em&gt;j&lt;/em&gt; &amp;lt; &lt;em&gt;N&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The multimethod has a tuple of types &lt;em&gt;u&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;&lt;em&gt;k&lt;/em&gt;&lt;!-- raw HTML omitted --&gt; of size &lt;em&gt;NV&lt;/em&gt; called &lt;em&gt;&lt;strong&gt;non-virtual&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;parameter types&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The multimethod has a &lt;strong&gt;return type&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For each match method &lt;em&gt;m&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;&lt;em&gt;j&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first &lt;em&gt;D&lt;/em&gt; parameter types is a tuple of types &lt;em&gt;t&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;&lt;em&gt;j&lt;/em&gt;&lt;!-- raw HTML omitted --&gt; of size &lt;em&gt;D&lt;/em&gt; called &lt;em&gt;&lt;strong&gt;virtual&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;parameter types&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;The following parameter types &lt;strong&gt;must be exactly&lt;/strong&gt; the &lt;em&gt;non-virtual&lt;/em&gt; parameter types defined above.&lt;/li&gt;&#xA;&lt;li&gt;An object of type &lt;em&gt;R&lt;/em&gt; is returned or an object of type &lt;em&gt;RA&lt;/em&gt; from which &lt;em&gt;R&lt;/em&gt; &lt;strong&gt;is assignable&lt;/strong&gt;. Otherwise an exception is thrown.&lt;/li&gt;&#xA;&lt;li&gt;There is &lt;strong&gt;optional data&lt;/strong&gt; that can be used for solving ambiguities.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;The multimethod has a &lt;strong&gt;method comparator&lt;/strong&gt;, that can be the &lt;em&gt;symmetric&lt;/em&gt;, &lt;em&gt;asymmetric&lt;/em&gt; or another distance comparator.&lt;/li&gt;&#xA;&lt;li&gt;The multimethod has a &lt;strong&gt;cache strategy&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;&#xA;&lt;p&gt;Suppose we have a multimethod of dimension 2 with 3 non-virtual parameter types (&lt;em&gt;String&lt;/em&gt;, &lt;em&gt;int&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;) and the return type &lt;em&gt;int&lt;/em&gt;.&#xA;The following match methods can be part of the multimethod or not:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search for the best match</title>
      <link>/docs/theory/search-best-match.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/search-best-match.html</guid>
      <description>&lt;p&gt;Now that we can define an ordering on the tuple of types by using the distance comparators and tuple of types distance, let&amp;rsquo;s see how we search for the best matching method.&#xA;The algorithm is based on the definition of the multimethod in &lt;a href=&#34;../../docs/theory/multimethod-definition.html&#34;&gt;multimethod definition&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;algorithm&#34;&gt;Algorithm&lt;/h3&gt;&#xA;&lt;p&gt;We invoke &lt;em&gt;M&lt;/em&gt; on a tuple of objects that has the tuple of types &lt;em&gt;t&lt;/em&gt;.&#xA;The algorithm to select the method to apply is made up of two parts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Invoke with cache</title>
      <link>/docs/theory/invoke.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/invoke.html</guid>
      <description>&lt;p&gt;The invoke sequence is presented in this section. We introduce the cache strategy.&lt;/p&gt;&#xA;&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Simple hierarchy&#34; src=&#34;../../images/invoke.png#center&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;When the multimethod is invoked on objects &lt;em&gt;v&lt;/em&gt; with a tuple of virtual types &lt;em&gt;t&lt;/em&gt; and &lt;em&gt;nv&lt;/em&gt; with a tuple of types &lt;em&gt;u&lt;/em&gt;, we first search for the best match method for &lt;em&gt;t&lt;/em&gt; as presented in &lt;a href=&#34;../../docs/theory/search-best-match.html&#34;&gt;search for the best match&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If the best match method is found then it is applied to the passed arguments.&lt;/li&gt;&#xA;&lt;li&gt;If the method is not found - no compatible method or ambiguity - an exception is thrown.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If the multimethod is unchanged between two calls on different objects that have the same tuple of virtual types, then the same best match method will be called.&#xA;We can store it in a &lt;strong&gt;cache&lt;/strong&gt;, so that the search for the best match is only done once for a tuple of types.&#xA;However the cache must be cleared when the multimethod is changed e.g. when adding a new method or setting optional data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asymmetric vs symmetric</title>
      <link>/docs/theory/asymmetric-vs-symmetric.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docs/theory/asymmetric-vs-symmetric.html</guid>
      <description>&lt;p&gt;To finish the theory part, we can rapidly discuss about the asymmetric and symmetric comparators in multiple dimensions.&#xA;For their definition, refer to &lt;a href=&#34;../../docs/theory/distance-comparators.html&#34;&gt;distance comparators&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;On one side, the &lt;em&gt;asymmetric&lt;/em&gt; comparator is &lt;strong&gt;easy&lt;/strong&gt; to understand and predict. The dimensions are taken one by one to find the best match. The ambiguities can only come from a multiple inheritance of interfaces.&lt;br&gt;&#xA;On the other side, the &lt;em&gt;symmetric&lt;/em&gt; comparator is &lt;strong&gt;democratic&lt;/strong&gt;. All the dimensions have the same weight in the final selection. However more democracy means more ambiguities and more difficulties to select one best match.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
